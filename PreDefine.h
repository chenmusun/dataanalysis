#pragma once

//logName
#define CMC_LOG_NAME   "CMC_LOGINFO"

//LogInfo表指标
static const int ANA_IMPL_LOGINFO_NOFOUND= 0;
static const int ANA_IMPL_LOGINFO_LOADERROR = 1;
static const int ANA_IMPL_LOGINFO_LOADSUCCESS = 2;

//重试次数
static const int ANA_IMPL_RETRYTIMES = 500;

//无效值
static const double ANA_IMPL_INVALID_LOCATION = -99999;
static const long ANA_IMPL_INVALID_TIME = -99999;
static const double ANA_IMPL_INVALID_RXL = -255;

//门限值
static const int ANA_IMPL_GSM_RXQ_POOR_TIME = 15;

//频段
static const int ANA_IMPL_GSM_BAND_900 = 1;
static const int ANA_IMPL_GSM_BAND_E900 = 2;
static const int ANA_IMPL_GSM_BAND_1800 = 3;
static const int ANA_IMPL_TD_BAND = 4;

//主被叫
static const int ANA_IMPL_CALL_UNKNOW = 3;
static const int ANA_IMPL_ORIGINALCALL = 0;
static const int ANA_IMPL_TERMINALCALL = 1;
static const int ANA_IMPL_BOTHCALL = 2;


//制式
static const int ANA_IMPL_NETWORKTYPE_GSM = 0;
static const int ANA_IMPL_NETWORKTYPE_TD = 1;
static const int ANA_IMPL_NETWORKTYPE_WCDMA = 2;
static const int ANA_IMPL_NETWORKTYPE_CDMA = 3;
static const int ANA_IMPL_NETWORKTYPE_CDMA2000 = 4;
static const int ANA_IMPL_NETWORKTYPE_WCDMA_GSM = 5;
static const int ANA_IMPL_NETWORKTYPE_WLAN = 6;
static const int ANA_IMPL_NETWORKTYPE_LTE = 7;

//业务
static const int ANA_IMPL_SERVICETYPE_CS = 1;
static const int ANA_IMPL_SERVICETYPE_VP = 2;
static const int ANA_IMPL_SERVICETYPE_WAP = 3;
static const int ANA_IMPL_SERVICETYPE_FTP = 4;
static const int ANA_IMPL_SERVICETYPE_UNKNOWN = -1;

//GPRS
static const int ANA_IMPL_PS_GPRS = 1;
static const int ANA_IMPL_PS_EGPRS = 2;
static const int ANA_IMPL_PS_NULL = 3;


//RAT类型
static const int ANA_IMPL_RAT_GSM = 0;
static const int ANA_IMPL_RAT_TD = 1;
static const int ANA_IMPL_RAT_LTE = 2;
static const int ANA_IMPL_RAT_CDMA = 3;
static const int ANA_IMPL_RAT_WCDMA = 4;
static const int ANA_IMPL_RAT_NULL = 0xff;





//请与数据库表/视图字段索引保持严格一致
enum DTColIndexEunm
{
	E_MSGGID = 1 ,
	E_TEID ,
	E_LOGID ,
	E_UEID ,
	E_PCTIME ,
	E_TIMESTAMP ,  
	E_LONGITUDE ,
	E_LATITUDE ,
	E_UETYPE ,
	E_RAT ,
	E_PROTOCOLVER ,
	E_IMSI ,
	E_MSISDN ,
	E_MCC ,
	E_MNC ,
	E_LAC ,
	E_RAC ,
	E_TMSI ,
	E_PTMSI ,
	E_RNCID ,
	E_CI ,
	E_CPI ,
	E_UARFCN ,
	E_FREQ ,
	E_EVENTID ,
	E_MOULD ,
	E_MOULDSTATE ,
	E_PCCPCHRSCP_RXLEVSUB ,
	E_PCCPCHCIR_RXLEVFULL ,
	E_BLER_D ,
	E_BLER_H ,
	E_SYNCULTXPOWER_RXQUALSUB ,
	E_PRACHTXPOWER_RXQUALFULL ,
	E_TXPOWER ,
	E_DPCH_RSCP ,
	E_DL_SIR ,
	E_TS0RSSI ,
	E_PATHLOSS,
	E_UL_BRU ,
	E_DL_BRU ,
	E_UUMSGPROTOCOL ,
	E_UUMSGID ,
	E_DECODEENTRYPARAM  ,
	E_CHANNELMODE,
	E_IENUMBER,
	E_IEVALUE,
	E_MSGNAME,
	E_MSG
};

enum DTAnaStatColIndexEunm
{
	E_RXLEV = E_MSG + 1, 
	E_DPCHCIR, 
	E_FTPDLOADTHROUGHPUT, 
	E_L2DLTHROUGHPUT, 
	E_MOSSCORE,
	E_TOTALB_D,
	E_ERRB_D,
	E_TOTALB_H,
	E_ERRB_H,
	E_CDMA_RXAGC,
	E_CDMA_ECIO,
	E_CDMA_TXPOWER,
	E_DRCRATEINST, 
	E_RLP_RX_THR_INST, 
	E_PERINST, 
	E_RLP_RX_THR
};


enum DTNCellColIndexEunm_EX
{
	E_N_MSGGID_EX = E_MSG + 1,
	E_N_TEID_EX,
	E_N_LOGID_EX,
	E_N_UEID_EX,
	E_N_PCTIME_EX,
	E_N_LONGITUDE_EX,
	E_N_LATITUDE_EX,
	E_N_RAT_EX,
	E_N_NCELL_CPI_BSIC_EX,
	E_N_NCELL_UARFCN_ARFCN_EX,
	E_N_PCCPCHRSCP_RXLEV_EX,
	E_N_PATHLOSS_EX,
	E_N_ISCP0_EX,  
	E_N_RN_EX,
	E_N_RSSI_EX,
	E_N_QOFFSET_EX,
	E_N_SFNOTD2_EX,
	E_N_STATE_EX,
	E_N_BAND_EX,
	E_N_RXLEVMIN_EX,
	E_N_C1_EX,
	E_N_C2_EX,
	E_N_C31_EX,
	E_N_C32_EX
};

enum DTNCellColIndexEunm
{
	E_N_MSGGID = 1,
	E_N_TEID,
	E_N_LOGID,
	E_N_UEID,
	E_N_PCTIME,
	E_N_LONGITUDE,
	E_N_LATITUDE,
	E_N_RAT,
	E_N_NCELL_CPI_BSIC,
	E_N_NCELL_UARFCN_ARFCN,
	E_N_PCCPCHRSCP_RXLEV,
	E_N_PATHLOSS,
	E_N_ISCP0,  
	E_N_RN,
	E_N_RSSI,
	E_N_QOFFSET,
	E_N_SFNOTD2,
	E_N_STATE,
	E_N_BAND,
	E_N_RXLEVMIN,
	E_N_C1,
	E_N_C2,
	E_N_C31,
	E_N_C32
};

enum DTUEInfoIndexEunm
{
	E_UE_LOGID = 1,
	E_UE_UEID,
	E_UE_TEID,
	E_UE_MSGGID,
	E_UE_PCTIME,
	E_UE_UETYPE,
	E_UE_PROVER,
	E_UE_IMSI,
	E_UE_MSISDN,
	E_UE_IMEI,
	E_UE_HSDPACAT
};

enum DTLogInfoIndexEnum
{
	E_TB_DTLOGINFO_LOGID = 1,
	E_TB_DTLOGINFO_TEID,
	E_TB_DTLOGINFO_TESTPLAN,
	E_TB_DTLOGINFO_LOGNAME,
	E_TB_DTLOGINFO_BEGINTIMESEC,
	E_TB_DTLOGINFO_BEGINGTIMEMSEC,
	E_TB_DTLOGINFO_ENDTIMESEC,
	E_TB_DTLOGINFO_ENDTIMEMSEC,
	E_TB_DTLOGINFO_UEID,
	E_TB_DTLOGINFO_LOGVERSION,
	E_TB_DTLOGINFO_TETYPE,
	E_TB_DTLOGINFO_LOADSTATUS,
	//Begin Add wyq
    E_TB_DTLOGINFO_TESTPOINTSN,
	//End Add wyq
};

enum TESTLOGITEMIndexEnum
{
	E_TESTLOG_ITEM_REC_SEQ_NO = 1,
	E_TESTLOG_ITEM_IMSI,
	E_TESTLOG_ITEM_BEGIN_DATE,
	E_TESTLOG_ITEM_BOX_ID,
	E_TESTLOG_ITEM_CALL_TYPE,
	E_TESTLOG_ITEM_DISTANCE,
	E_TESTLOG_ITEM_END_DATE,
	E_TESTLOG_ITEM_FILE_NAME,
	E_TESTLOG_ITEM_FILE_TYPE,
	E_TESTLOG_ITEM_FILE_LINK,
	E_TESTLOG_ITEM_MODULE_NO,
	E_TESTLOG_ITEM_NETWORK_STANDARD,
	E_TESTLOG_ITEM_OPERATOR_NAME,
	E_TESTLOG_ITEM_PACKAGE_NUMBER,
	E_TESTLOG_ITEM_PROVINCE_GROUP,
	E_TESTLOG_ITEM_SERVICE_TYPE,
	E_TESTLOG_ITEM_START_DATE,
	E_TESTLOG_ITEM_TERMINAL_GROUP,
	E_TESTLOG_ITEM_TESTFILE_STATUS,
	E_TESTLOG_ITEM_TESTPLAN_NAME,
	E_TESTLOG_ITEM_UEID,
	E_TESTLOG_ITEM_UPLOAD_SUCCESS,
	E_TESTLOG_ITEM_UPLOADED_SIZE,
	E_TESTLOG_ITEM_TERMINAL_ID,
	E_TESTLOG_ITEM_FTP_BYTESIZE,
	E_TESTLOG_ITEM_TRIDES_KEY,
	E_TESTLOG_ITEM_TEST_LEVEL,
	E_TESTLOG_ITEM_DTCQT_TYPE,
	E_TESTLOG_ITEM_TEST_NODE_NAME,
	E_TESTLOG_ITEM_TEST_TYPE_SINGLEENB,
	E_TESTLOG_ITEM_TEST_SIGN,
	E_TESTLOG_ITEM_TEST_ESTIMATE,
	E_TESTLOG_ITEM_LONGITUDE,
	E_TESTLOG_ITEM_LATITUDE,
	E_TESTLOG_ITEM_F_OR_Z,
	E_TESTLOG_ITEM_UL_OR_DL,
};

